/**
 * Sharing Module for SavePlan Pro
 * Handles sharing financial plans to AI platforms and other destinations
 */

class SharingManager {
    constructor() {
        this.modal = null;
        this.reportPreview = null;
        this.init();
    }

    init() {
        this.modal = document.getElementById('shareModal');
        this.reportPreview = document.getElementById('reportPreview');
        this.setupEventListeners();
    }

    setupEventListeners() {
        // Close modal when clicking outside
        if (this.modal) {
            this.modal.addEventListener('click', (e) => {
                if (e.target === this.modal) {
                    this.closeModal();
                }
            });
        }

        // Close modal on Escape key
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.modal && this.modal.classList.contains('open')) {
                this.closeModal();
            }
        });
    }

    generateReport() {
        const data = this.gatherFinancialData();

        const report = `
💰 SAVEPLAN PRO - FINANCIAL PLAN REPORT
Generated on: ${new Date().toLocaleDateString()}

📊 FINANCIAL GOAL
Target Amount: ${formatCurrency(data.goal)}
Already Saved: ${formatCurrency(data.current)} (${Math.round((data.current / data.goal) * 100)}% of goal)
Time Frame: ${data.months} months (${Math.round(data.months / 12 * 10) / 10} years)
Expected ROI: ${data.roi}% annually

💼 INCOME SITUATION
Total Household Income: ${formatCurrency(data.totalIncome)}/month
Monthly Expenses: ${formatCurrency(data.expenses)}/month
Available for Saving: ${formatCurrency(data.availableIncome)}/month

📈 SAVINGS PLAN
Required Monthly Saving: ${formatCurrency(data.requiredMonthly)}
Savings Rate: ${formatPercent(data.savingsRate)}
Money Left After Saving: ${formatCurrency(data.surplus)}/month

🎯 PROJECTIONS
Final Amount (with growth): ${formatCurrency(data.futureValue)}
Total Contributions: ${formatCurrency(data.totalContributions)}
Interest Earned: ${formatCurrency(data.interestEarned)}
Plan Feasibility: ${this.getFeasibilityStatus(data.surplus)}

💡 KEY INSIGHTS
- Monthly commitment represents ${formatPercent(data.savingsRate)} of total income
- Investment growth could add ${formatCurrency(data.interestEarned)} to your savings
- You'll have ${formatCurrency(data.surplus)} monthly buffer after saving
${this.getQuickTips(data)}

---
Generated by SavePlan Pro - Smart Financial Planning Tool
        `.trim();

        return report;
    }

    gatherFinancialData() {
        // Get data from the calculator or directly from inputs
        if (window.calculator) {
            const calcData = window.calculator.gatherCalculationData();
            const results = window.calculator.performCalculations(calcData);
            return results;
        }

        // Fallback: gather directly from form inputs
        return {
            goal: getInputValue('goal'),
            current: getInputValue('current'),
            months: getInputValue('months'),
            roi: getInputValue('roi'),
            expenses: getInputValue('expenses'),
            totalIncome: window.incomeManager ? window.incomeManager.getTotalIncome() : 69000,
            requiredMonthly: 22222,
            availableIncome: 24000,
            surplus: 1778,
            savingsRate: 32,
            futureValue: 1000000,
            totalContributions: 800000,
            interestEarned: 200000
        };
    }

    getFeasibilityStatus(surplus) {
        if (surplus < 0) return "❌ Needs Adjustment - Goal exceeds available income";
        if (surplus < 5000) return "⚠️ Tight Budget - Limited emergency buffer";
        return "✅ Achievable - Good financial cushion";
    }

    getQuickTips(data) {
        const tips = [];

        if (data.savingsRate > 50) {
            tips.push("- Consider if such a high savings rate is sustainable long-term");
        }

        if (data.surplus < 0) {
            tips.push("- You may need to extend your timeline or reduce your goal");
        } else if (data.surplus < 5000) {
            tips.push("- Build an emergency fund alongside this goal");
        }

        if (data.roi < 3) {
            tips.push("- Consider higher-yield investment options");
        } else if (data.roi > 8) {
            tips.push("- High ROI expectations carry more risk - diversify your investments");
        }

        tips.push("- Set up automatic transfers to stay on track");
        tips.push("- Review and adjust your plan quarterly");

        return tips.length > 0 ? '\n\n💭 RECOMMENDATIONS\n' + tips.join('\n') : '';
    }

    openModal() {
        if (!this.modal) return;

        // Generate and preview the report
        const report = this.generateReport();
        if (this.reportPreview) {
            this.reportPreview.textContent = report;
        }

        this.modal.classList.add('open');
        document.body.style.overflow = 'hidden';
    }

    closeModal() {
        if (!this.modal) return;

        this.modal.classList.remove('open');
        document.body.style.overflow = '';
    }

    shareToAI(platform) {
        const report = this.generateReport();
        const promptPrefix = this.getAIPrompt(platform);
        const fullPrompt = promptPrefix + '\n\n' + report;

        const urls = {
            chatgpt: 'https://chat.openai.com/',
            claude: 'https://claude.ai/',
            mistral: 'https://chat.mistral.ai/'
        };

        // Copy to clipboard first
        this.copyToClipboard(fullPrompt);

        // Open the AI platform
        if (urls[platform]) {
            window.open(urls[platform], '_blank');
            this.showSuccess(`Report copied to clipboard! Opening ${platform.charAt(0).toUpperCase() + platform.slice(1)}...`);
        }

        this.closeModal();
    }

    getAIPrompt(platform) {
        const prompts = {
            chatgpt: `I've created a financial savings plan and would like your expert analysis and advice. Please review my plan and provide:

1. Assessment of plan feasibility and realism
2. Suggestions for optimization
3. Risk analysis and mitigation strategies
4. Alternative scenarios to consider
5. Specific action steps to implement this plan

Here's my financial plan:`,

            claude: `As a financial planning expert, please analyze my savings plan and provide comprehensive advice. I'm looking for:

1. Detailed feasibility analysis
2. Risk assessment and recommendations
3. Tax optimization strategies (Swedish context preferred)
4. Investment allocation suggestions
5. Plan optimization opportunities
6. Behavioral finance tips for success

My financial plan details:`,

            mistral: `Please analyze my financial savings plan and provide quick, actionable insights on:

1. Plan viability and adjustments needed
2. Investment strategy recommendations
3. Key risks and how to mitigate them
4. Optimization opportunities
5. Next steps to implement

Financial plan summary:`
        };

        return prompts[platform] || prompts.chatgpt;
    }

    copyToClipboard(text) {
        if (navigator.clipboard && window.isSecureContext) {
            return navigator.clipboard.writeText(text);
        } else {
            // Fallback for older browsers
            const textArea = document.createElement('textarea');
            textArea.value = text;
            textArea.style.position = 'fixed';
            textArea.style.left = '-999999px';
            textArea.style.top = '-999999px';
            document.body.appendChild(textArea);
            textArea.focus();
            textArea.select();

            try {
                document.execCommand('copy');
                textArea.remove();
                return Promise.resolve();
            } catch (err) {
                textArea.remove();
                return Promise.reject(err);
            }
        }
    }

    copyReport() {
        const report = this.generateReport();

        this.copyToClipboard(report)
            .then(() => {
                this.showSuccess('Report copied to clipboard!');
            })
            .catch(() => {
                this.showError('Failed to copy report. Please select and copy manually.');
            });

        this.closeModal();
    }

    shareByEmail() {
        const report = this.generateReport();
        const subject = encodeURIComponent('My SavePlan Pro Financial Plan');
        const body = encodeURIComponent(report);

        const mailtoLink = `mailto:?subject=${subject}&body=${body}`;

        try {
            window.location.href = mailtoLink;
            this.showSuccess('Opening email client...');
        } catch (err) {
            // Fallback: copy to clipboard
            this.copyToClipboard(report).then(() => {
                this.showSuccess('Report copied to clipboard. Paste it into your email!');
            });
        }

        this.closeModal();
    }

    generateSharableURL() {
        const data = this.gatherFinancialData();
        const params = new URLSearchParams({
            goal: data.goal,
            current: data.current,
            months: data.months,
            roi: data.roi,
            expenses: data.expenses,
            income: data.totalIncome
        });

        return window.location.origin + window.location.pathname + '?' + params.toString();
    }

    shareURL() {
        const url = this.generateSharableURL();

        if (navigator.share) {
            navigator.share({
                title: 'My SavePlan Pro Financial Plan',
                text: 'Check out my financial savings plan!',
                url: url
            }).catch(() => {
                this.copyToClipboard(url).then(() => {
                    this.showSuccess('Plan URL copied to clipboard!');
                });
            });
        } else {
            this.copyToClipboard(url).then(() => {
                this.showSuccess('Plan URL copied to clipboard!');
            });
        }

        this.closeModal();
    }

    exportPDF() {
        // This would require a PDF library like jsPDF
        // For now, we'll use the browser's print functionality
        const report = this.generateReport();

        const printWindow = window.open('', '_blank');
        printWindow.document.write(`
            <!DOCTYPE html>
            <html>
            <head>
                <title>SavePlan Pro - Financial Plan Report</title>
                <style>
                    body {
                        font-family: Arial, sans-serif;
                        line-height: 1.6;
                        max-width: 800px;
                        margin: 0 auto;
                        padding: 20px;
                    }
                    h1 {
                        color: #6366f1;
                        border-bottom: 2px solid #6366f1;
                        padding-bottom: 10px;
                    }
                    pre {
                        white-space: pre-wrap;
                        background: #f8fafc;
                        padding: 15px;
                        border-radius: 8px;
                        border-left: 4px solid #6366f1;
                    }
                    @media print {
                        body { margin: 0; }
                    }
                </style>
            </head>
            <body>
                <h1>SavePlan Pro - Financial Plan Report</h1>
                <pre>${report}</pre>
                <script>
                    window.onload = function() {
                        window.print();
                        window.onafterprint = function() {
                            window.close();
                        };
                    };
                </script>
            </body>
            </html>
        `);
        printWindow.document.close();

        this.closeModal();
    }

    showSuccess(message) {
        const toast = document.getElementById('successToast');
        const messageEl = document.getElementById('toastMessage');

        if (toast && messageEl) {
            messageEl.textContent = message;
            toast.classList.add('show');

            setTimeout(() => {
                toast.classList.remove('show');
            }, 3000);
        }
    }

    showError(message) {
        const toast = document.getElementById('successToast');
        const messageEl = document.getElementById('toastMessage');

        if (toast && messageEl) {
            messageEl.textContent = message;
            toast.style.background = 'var(--danger)';
            toast.classList.add('show');

            setTimeout(() => {
                toast.classList.remove('show');
                toast.style.background = '';
            }, 4000);
        }
    }

    // Social media sharing
    shareToSocial(platform) {
        const report = this.generateReport();
        const summary = this.generateSocialSummary();
        const url = this.generateSharableURL();

        const socialUrls = {
            twitter: `https://twitter.com/intent/tweet?text=${encodeURIComponent(summary)}&url=${encodeURIComponent(url)}`,
            linkedin: `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(url)}`,
            facebook: `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`
        };

        if (socialUrls[platform]) {
            window.open(socialUrls[platform], '_blank', 'width=600,height=400');
        }

        this.closeModal();
    }

    generateSocialSummary() {
        const data = this.gatherFinancialData();
        return `🎯 Just planned my financial future with SavePlan Pro!
Goal: ${formatCurrency(data.goal)} in ${Math.round(data.months/12*10)/10} years
Monthly savings needed: ${formatCurrency(data.requiredMonthly)}
Projected growth: ${formatCurrency(data.interestEarned)} in interest! 💰

#FinancialPlanning #Savings #PersonalFinance`;
    }

    // Load saved plans from localStorage
    loadSavedPlans() {
        const saved = localStorage.getItem('saveplan_plans');
        return saved ? JSON.parse(saved) : [];
    }

    // Save current plan
    saveCurrentPlan(name) {
        const plans = this.loadSavedPlans();
        const data = this.gatherFinancialData();

        const plan = {
            id: Date.now(),
            name: name || `Plan ${plans.length + 1}`,
            data: data,
            created: new Date().toISOString(),
            report: this.generateReport()
        };

        plans.push(plan);
        localStorage.setItem('saveplan_plans', JSON.stringify(plans));

        this.showSuccess(`Plan "${plan.name}" saved successfully!`);
        return plan;
    }

    // Compare with saved plans
    comparePlans(planId) {
        const plans = this.loadSavedPlans();
        const savedPlan = plans.find(p => p.id === planId);

        if (!savedPlan) return null;

        const currentData = this.gatherFinancialData();
        const comparison = {
            saved: savedPlan.data,
            current: currentData,
            differences: this.calculateDifferences(savedPlan.data, currentData)
        };

        return comparison;
    }

    calculateDifferences(saved, current) {
        return {
            goal: current.goal - saved.goal,
            current: current.current - saved.current,
            months: current.months - saved.months,
            requiredMonthly: current.requiredMonthly - saved.requiredMonthly,
            futureValue: current.futureValue - saved.futureValue
        };
    }
}

// Global functions for HTML onclick handlers
function shareResults() {
    if (window.sharingManager) {
        window.sharingManager.openModal();
    }
}

function closeShareModal() {
    if (window.sharingManager) {
        window.sharingManager.closeModal();
    }
}

function shareToAI(platform) {
    if (window.sharingManager) {
        window.sharingManager.shareToAI(platform);
    }
}

function copyReport() {
    if (window.sharingManager) {
        window.sharingManager.copyReport();
    }
}

function shareByEmail() {
    if (window.sharingManager) {
        window.sharingManager.shareByEmail();
    }
}

function resetCalculator() {
    if (window.calculator && window.calculator.reset) {
        window.calculator.reset();
        if (window.sharingManager) {
            window.sharingManager.showSuccess('Calculator reset to default values!');
        }
    }
}

// Initialize sharing manager when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.sharingManager = new SharingManager();

    // Load plan from URL parameters if present
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.has('goal')) {
        setTimeout(() => {
            // Set values from URL
            const fields = ['goal', 'current', 'months', 'roi', 'expenses'];
            fields.forEach(field => {
                const value = urlParams.get(field);
                const element = document.getElementById(field);
                if (value && element) {
                    element.value = value;
                }
            });

            // Trigger recalculation
            if (window.calculator && window.calculator.calculate) {
                window.calculator.calculate();
            }
        }, 500);
    }
});
